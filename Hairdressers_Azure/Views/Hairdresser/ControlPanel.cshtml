@model Hairdresser

@{
    ViewData["Title"] = "C&G: Panel de control";
    List<Schedule>? schedules = ViewData["SCHEDULES"] as List<Schedule>;
    string json_schedules = HelperJson.SerializeObject(schedules);
    string regexPattern = "\"([^\"]+)\":";
    var js_schedules = Regex.Replace(json_schedules, regexPattern, "$1:");

    string? first_schedule = ViewData["FIRST_SCHEDULE"] as string;

    string phone_info = (Model.Phone == "") ? "Sin número de telefono" : Model.Phone;
}

<div class="background_base bkg_001"></div>
<div class="mauto">
    <h5>@Model.Image</h5>
    <h1 class="title_form data">@Model.Name</h1>
    <h1 class="title_form data hide">Editar Peluquería</h1>
    <div class="container_box data">
        <a asp-controller="Appointments" asp-action="Appointments" asp-route-hairdresserId="@Model.HairdresserId" class="btn_appointments">Gestionar Citas</a>
        <a asp-controller="Hairdresser" asp-action="Services" asp-route-hairdresserId="@Model.HairdresserId" asp-route-hairdresserName="@Model.Name" class="btn_services">
            Gestionar Servicios
        </a>
        <div class="btn_container_actions">
            <button class="btn_update btn_showers">Editar peluquería</button>
            <button id="btn_delete" class="btn_danger">Eliminar peluquería</button>
        </div>
        <div>
            <p>@Model.Address</p>
            <p>@phone_info</p>
        </div>
        @if (schedules != null) {
            <div class="cb_section_2" >
                <div id="schedules_container"></div>
            </div>
        }
    </div>
    <div class="container_box data hide">
        <form method="post" action="UpdateHairdresser" style="margin-top: 10px;" enctype="multipart/form-data">
            @Html.AntiForgeryToken()
            <input type="hidden" name="HairdresserId" value="@Model.HairdresserId" />
            <label class="login-control registrer-control">Imagen del establecimiento: <input type="file" name="file" /></label>
            <input type="text" name="Name" id="h_name" class="form-control" maxlength="60" placeholder="Nombre" value="@Model.Name" />
            <div class="form_div_flex">
                <input type="text" id="h_address" name="Address" class="form-control" maxlength="100" placeholder="Dirección" value="@Model.Address" />
                <input type="text" id="h_postalCode" name="PostalCode" class="form-control" maxlength="5" placeholder="Código Postal" value="@Model.PostalCode" />
            </div>
            <input type="text" id="h_phone" name="Phone" class="form-control" maxlength="20" placeholder="Teléfono" value="@Model.Phone" />
            <div class="btn_container_submit_cancel">
                <span></span>
                <span></span>
                <button class="form-button form-button-create">
                    Guardar cambios
                </button>
                <span></span>
                <div style="width: 100%;">
                    <button type="button" class="form-button form-button-cancel btn_showers">
                        Cancelar
                    </button>
                </div>
            </div>
        </form>
    </div>
</div>

@section hairdresser_script{
    <script src="~/js/schedule_builder.js"></script>
    <script src="~/js/schedule_actions.js"></script>
    <script>
        $(document).ready(function () {
            $("#schedules_container").load("/Hairdresser/_ScheduleContainerPartial?hairdresser_id=" + @Model.HairdresserId, function () {
                generateScheduleTable(); // Generamos la estructura de la tabla

                toggleTdDays(); // Verificamos si es necesario mostrar el td3
                storeCurrentType(); // Almacenar el valor actual del select al cargar la página

                var schedules = @Html.Raw(js_schedules);
                chargeScheduleData(generateScheduleJSON("@first_schedule", schedules));
                checkScheduleName("@first_schedule", schedules);

                $("input[name='schedule_name']").keyup(function () {
                    checkScheduleName($(this).val(), schedules);
                    chargeScheduleData(generateScheduleJSON($(this).val(), schedules));
                });
                
                $("input[name='schedule_name']").change(function () {
                    chargeScheduleData(generateScheduleJSON($(this).val(), schedules));
                });

                $(".schedule_types").change(async function () { // Mostrar/Ocultar td3
                    toggleTdDays(); // Modificamos la columna de días
                    checkButtonAdd(); // Comprobamos el estado del botón de añadir
                    storeCurrentType(); // Almacenamos el nuevo valor del type
                });

                $(document).click(function (event) { // Cuando se haga click fuera de la caja, esta se guarda
                    if (!$(event.target).closest(".days_button").length && !$(event.target).closest(".days_select").length) {
                        $(".days_select").slideUp();
                    }
                });
            });
        });

        function generateScheduleJSON(schedule_name, schedules) {
            var registros = [];

            for (var i = 0; i < schedules.length; i++) {
                if (schedules[i].Name === schedule_name) {
                    var scheduleRows = (schedules[i].ScheduleRows !== null) ? schedules[i].ScheduleRows : [];

                    for (var j = 0; j < scheduleRows.length; j++) {
                        var daysText = '';

                        if (scheduleRows[j].Monday) daysText += 'L ';
                        if (scheduleRows[j].Tuesday) daysText += 'M ';
                        if (scheduleRows[j].Wednesday) daysText += 'X ';
                        if (scheduleRows[j].Thursday) daysText += 'J ';
                        if (scheduleRows[j].Friday) daysText += 'V ';
                        if (scheduleRows[j].Saturday) daysText += 'S ';
                        if (scheduleRows[j].Sunday) daysText += 'D ';

                        registros.push({
                            apertura: scheduleRows[j].Start,
                            cierre: scheduleRows[j].End,
                            daysText: daysText.trim(),
                            schedule_id: scheduleRows[j].ScheduleId,
                            schedule_row_id: scheduleRows[j].ScheduleRowId
                        });
                    }

                    break;
                }
            }
            return registros;
        }
    </script>
    <script>
        var edit_mode = false;
        $(function () {
            $('.btn_showers').click(function () {
                edit_mode = !edit_mode;
                if (edit_mode == false) { // Si pulso cancelar
                    $("#h_name").val("@Html.Raw(Model.Name)");
                    $("#h_address").val("@Html.Raw(Model.Address)");
                    $("#h_postalCode").val("@Html.Raw(Model.PostalCode)");
                    $("#h_phone").val("@Html.Raw(Model.Phone)");
                }
                $('.data').toggleClass('hide');
            });
        });

        $(function () {
            $('#btn_delete').click(function () {
                Swal.fire({
                    title: "¿Está segur@@ de que desea eliminar esta peluquería?",
                    text: "Esta acción no podrá revertirse",
                    icon: "warning",
                    confirmButtonText: "Sí, eliminar",
                    confirmButtonColor: "#cb0000",
                    showCancelButton: true,
                }).then((result) => {
                    if (result.isConfirmed) {
                        $.post("/Hairdresser/DeleteHairdresser", { hairdresser_id: @Model.HairdresserId }, function (url_Redirect) {
                            window.location.replace(url_Redirect); // Replace bloqueará la acción de volver atrás
                        });
                    }
                });
            });
        });
    </script>
}